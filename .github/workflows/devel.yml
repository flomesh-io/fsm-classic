name: development
on:
  push:
    branches:
      - develop
      - 'feature/**'
      - 'hotfix/**'

jobs:
  codegen:
    name: Codegen
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Setup Go 1.17
      uses: actions/setup-go@v3
      with:
        go-version: 1.17
    - name: go mod tidy
      run: make go-mod-tidy
    - name: Codegen checks
      run: make verify-codegen
    - name: init-repo scripts
      run: make check-scripts

  push_to_registry:
    name: Build and Push Docker image to Docker Hub - DEV
    runs-on: ubuntu-20.04
    needs:
    - codegen
    strategy:
      max-parallel: 5
      matrix:
        id: [ "manager", "proxy-init", "cluster-connector", "bootstrap", "ingress-pipy" ]
    steps:
    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.9.4'

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2.0.0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2.0.0

    - name: Login to DockerHub
      uses: docker/login-action@v2.1.0
      with:
        username: ${{ secrets.FLOMESH_DOCKERHUB_USERNAME }}
        password: ${{ secrets.FLOMESH_DOCKERHUB_PASSWORD }}

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set version
      run: |
        cat VERSION >> $GITHUB_ENV

    - name: Package Helm Charts
      run: make charts-tgz-dev

    - name: Docker meta - ${{ matrix.id }}
      id: docker_meta
      uses: crazy-max/ghaction-docker-meta@v4.1.0
      with:
        images: flomesh/fsm-${{ matrix.id }}
        tags: |
          type=raw,${{ env.APP_VERSION }}-dev
          type=raw,dev
          type=edge

    - name: Build and Push ${{ matrix.id }} - DEV
      uses: docker/build-push-action@v3.1.1
      with:
        context: .
        file: ./dockerfiles/${{ matrix.id }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.docker_meta.outputs.tags }}
        labels: ${{ steps.docker_meta.outputs.labels }}
        cache-from: type=registry,ref=flomesh/fsm-${{ matrix.id }}:buildcache
        cache-to: type=registry,ref=flomesh/fsm-${{ matrix.id }}:buildcache,mode=max
